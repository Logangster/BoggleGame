<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StringSocket</name>
    </assembly>
    <members>
        <member name="T:CustomNetworking.StringSocket">
             <summary> 
             A StringSocket is a wrapper around a Socket.  It provides methods that
             asynchronously read lines of text (strings terminated by newlines) and 
             write strings. (As opposed to Sockets, which read and write raw bytes.)  
            
             StringSockets are thread safe.  This means that two or more threads may
             invoke methods on a shared StringSocket without restriction.  The
             StringSocket takes care of the synchonization.
             
             Each StringSocket contains a Socket object that is provided by the client.  
             A StringSocket will work properly only if the client refrains from calling
             the contained Socket's read and write methods.
             
             If we have an open Socket s, we can create a StringSocket by doing
             
                StringSocket ss = new StringSocket(s, new UTF8Encoding());
             
             We can write a string to the StringSocket by doing
             
                ss.BeginSend("Hello world", callback, payload);
                
             where callback is a SendCallback (see below) and payload is an arbitrary object.
             This is a non-blocking, asynchronous operation.  When the StringSocket has 
             successfully written the string to the underlying Socket, or failed in the 
             attempt, it invokes the callback.  The parameters to the callback are a
             (possibly null) Exception and the payload.  If the Exception is non-null, it is
             the Exception that caused the send attempt to fail.
             
             We can read a string from the StringSocket by doing
             
                 ss.BeginReceive(callback, payload)
                 
             where callback is a ReceiveCallback (see below) and payload is an arbitrary object.
             This is non-blocking, asynchronous operation.  When the StringSocket has read a
             string of text terminated by a newline character from the underlying Socket, or
             failed in the attempt, it invokes the callback.  The parameters to the callback are
             a (possibly null) string, a (possibly null) Exception, and the payload.  Either the
             string or the Exception will be non-null, but nor both.  If the string is non-null, 
             it is the requested string (with the newline removed).  If the Exception is non-null, 
             it is the Exception that caused the send attempt to fail.
             </summary>
             <Author> Chris Weeter </Author>
        </member>
        <member name="F:CustomNetworking.StringSocket.socket">
            <summary>
            Socket that communicates with the other end of the socket
            </summary>
        </member>
        <member name="F:CustomNetworking.StringSocket.closedSocket">
            <summary>
            Boolean variable to keep track of if the socket has been closed.
            </summary>
        </member>
        <member name="F:CustomNetworking.StringSocket.incoming">
            <summary>
            Text that has been received from the client but not yet dealt with
            </summary>
        </member>
        <member name="F:CustomNetworking.StringSocket.sendIsOngoing">
            <summary>
             Records whether an asynchronous send attempt is ongoing
            </summary>
        </member>
        <member name="F:CustomNetworking.StringSocket.receiveIsOngoing">
            <summary>
            Records whether an asynchronus receive attempt is ongoing
            </summary>
        </member>
        <member name="F:CustomNetworking.StringSocket.encode">
            <summary>
            Encoding variable for changing raw bytes to string
            </summary>
        </member>
        <member name="F:CustomNetworking.StringSocket.receiveRequests">
            <summary>
            Queue to hold receive requests using the ReceiveVars struct
            </summary>
        </member>
        <member name="F:CustomNetworking.StringSocket.sendRequests">
            <summary>
            Queue to hold send requests using the SendVars struct
            </summary>
        </member>
        <member name="M:CustomNetworking.StringSocket.#ctor(System.Net.Sockets.Socket,System.Text.Encoding)">
            <summary>
            Creates a StringSocket from a regular Socket, which should already be connected.  
            The read and write methods of the regular Socket must not be called after the
            LineSocket is created.  Otherwise, the StringSocket will not behave properly.  
            The encoding to use to convert between raw bytes and strings is also provided.
            </summary>
        </member>
        <member name="M:CustomNetworking.StringSocket.StringReceived(System.IAsyncResult)">
            <summary>
            Called when some data has been received.
            It checks to see how many bytes were brought in, and then checks to see if 
            </summary>
        </member>
        <member name="M:CustomNetworking.StringSocket.StringSent(System.IAsyncResult)">
            <summary>
            Called when a message has been successfully sent. This also calls the callback for the send/receive
            </summary>
        </member>
        <member name="M:CustomNetworking.StringSocket.BeginSend(System.String,CustomNetworking.StringSocket.SendCallback,System.Object)">
            <summary>
            We can write a string to a StringSocket ss by doing
            
               ss.BeginSend("Hello world", callback, payload);
               
            where callback is a SendCallback (see below) and payload is an arbitrary object.
            This is a non-blocking, asynchronous operation.  When the StringSocket has 
            successfully written the string to the underlying Socket, or failed in the 
            attempt, it invokes the callback.  The parameters to the callback are a
            (possibly null) Exception and the payload.  If the Exception is non-null, it is
            the Exception that caused the send attempt to fail. 
            
            This method is non-blocking.  This means that it does not wait until the string
            has been sent before returning.  Instead, it arranges for the string to be sent
            and then returns.  When the send is completed (at some time in the future), the
            callback is called on another thread.
            
            This method is thread safe.  This means that multiple threads can call BeginSend
            on a shared socket without worrying around synchronization.  The implementation of
            BeginSend must take care of synchronization instead.  On a given StringSocket, each
            string arriving via a BeginSend method call must be sent (in its entirety) before
            a later arriving string can be sent.
            </summary>
        </member>
        <member name="M:CustomNetworking.StringSocket.ProcessRequests">
            <summary>
            Method is set up to process the request queue. As long as there are requests in the queue and
            newlines in the messages, the while loop will keep running to fulfill requests.
            </summary>
        </member>
        <member name="M:CustomNetworking.StringSocket.BeginReceive(CustomNetworking.StringSocket.ReceiveCallback,System.Object)">
            <summary>
            
            <para>
            We can read a string from the StringSocket by doing
            </para>
            
            <para>
                ss.BeginReceive(callback, payload)
            </para>
            
            <para>
            where callback is a ReceiveCallback (see below) and payload is an arbitrary object.
            This is non-blocking, asynchronous operation.  When the StringSocket has read a
            string of text terminated by a newline character from the underlying Socket, or
            failed in the attempt, it invokes the callback.  The parameters to the callback are
            a (possibly null) string, a (possibly null) Exception, and the payload.  Either the
            string or the Exception will be non-null, but nor both.  If the string is non-null, 
            it is the requested string (with the newline removed).  If the Exception is non-null, 
            it is the Exception that caused the send attempt to fail.
            </para>
            
            <para>
            This method is non-blocking.  This means that it does not wait until a line of text
            has been received before returning.  Instead, it arranges for a line to be received
            and then returns.  When the line is actually received (at some time in the future), the
            callback is called on another thread.
            </para>
            
            <para>
            This method is thread safe.  This means that multiple threads can call BeginReceive
            on a shared socket without worrying around synchronization.  The implementation of
            BeginReceive must take care of synchronization instead.  On a given StringSocket, each
            arriving line of text must be passed to callbacks in the order in which the corresponding
            BeginReceive call arrived.
            </para>
            
            <para>
            Note that it is possible for there to be incoming bytes arriving at the underlying Socket
            even when there are no pending callbacks.  StringSocket implementations should refrain
            from buffering an unbounded number of incoming bytes beyond what is required to service
            the pending callbacks.        
            </para>
            
            <param name="callback"> The function to call upon receiving the data</param>
            <param name="payload"> 
            The payload is "remembered" so that when the callback is invoked, it can be associated
            with a specific Begin Receiver....
            </param>  
            
            <example>
              Here is how you might use this code:
              <code>
                               client = new TcpClient("localhost", port);
                               Socket       clientSocket = client.Client;
                               StringSocket receiveSocket = new StringSocket(clientSocket, new UTF8Encoding());
                               receiveSocket.BeginReceive(CompletedReceive1, 1);
            
              </code>
            </example>
            </summary>
            
            
        </member>
        <member name="M:CustomNetworking.StringSocket.Close">
             <summary>
             Calling the close method will close the String Socket (and the underlying
             standard socket).  The close method  should make sure all 
            
             Note: ideally the close method should make sure all pending data is sent
                   
             Note: closing the socket should discard any remaining messages and       
                   disable receiving new messages
             
             Note: Make sure to shutdown the socket before closing it.
            
             Note: the socket should not be used after closing.
             </summary>
        </member>
        <member name="T:CustomNetworking.StringSocket.SendCallback">
            <summary>
            Delegate used for Send Callbacks. Takes 2 parameters.
            </summary>
            <param name="e"> Will be null if the send was successful, or an exception if it failed. </param>
            <param name="payload"> Payload that will allow for matching with the receive request</param>
        </member>
        <member name="T:CustomNetworking.StringSocket.ReceiveCallback">
            <summary>
            Delegate used for Receive Callbacks. Takes 3 parameters that are used to tell
            if the receive failed or passed.
            </summary>
            <param name="s"> This will be null if there was an exception, or else the string that was received if not.</param>
            <param name="e"> This will be null if the receive was successful. </param>
            <param name="payload"> Payload that was passed to keep track of the send request. </param>
        </member>
        <member name="T:CustomNetworking.StringSocket.ReceiveVars">
            <summary>
            Structure is set up the hold the receive requests
            </summary>
        </member>
        <member name="M:CustomNetworking.StringSocket.ReceiveVars.#ctor(CustomNetworking.StringSocket.ReceiveCallback,System.Object)">
            <summary>
            Constructor to be able to set the variables
            </summary>
            <param name="receiveCallback"> Struct's callback gets set to this parameter </param>
            <param name="receivePayload"> Struct's payload gets set to this parameter</param>
        </member>
        <member name="T:CustomNetworking.StringSocket.SendVars">
            <summary>
            Structure is set up to hold the Send Requests
            </summary>
        </member>
        <member name="M:CustomNetworking.StringSocket.SendVars.#ctor(System.String,CustomNetworking.StringSocket.SendCallback,System.Object)">
            <summary>
            Constructor for the SendVars struct
            </summary>
            <param name="sendMessage"> Struct's string variable will be set to this. </param>
            <param name="sendCallback"> Struct's callback variable will be set to this. </param>
            <param name="sendPayload"> Struct's payload variable will be set to this. </param>
        </member>
    </members>
</doc>
